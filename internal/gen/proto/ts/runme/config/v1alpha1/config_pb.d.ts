/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/config/v1alpha1/config.proto" (package "runme.config.v1alpha1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ConfigCore describes system-level configuration of the runme toolchain.
 *
 * @generated from protobuf message runme.config.v1alpha1.ConfigCore
 */
export interface ConfigCore {
    /**
     * @generated from protobuf oneof: source
     */
    source: {
        oneofKind: "project";
        /**
         * project indicates a dir-based source typically including multiple Markdown files.
         *
         * @generated from protobuf field: runme.config.v1alpha1.ConfigCore.Project project = 1;
         */
        project: ConfigCore_Project;
    } | {
        oneofKind: "filename";
        /**
         * filename indicates a single Markdown file.
         *
         * @generated from protobuf field: string filename = 2;
         */
        filename: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * env is the environment variables configuration.
     *
     * @generated from protobuf field: runme.config.v1alpha1.ConfigCore.Env env = 3;
     */
    env?: ConfigCore_Env;
    /**
     * log contains the log configuration.
     *
     * @generated from protobuf field: runme.config.v1alpha1.ConfigCore.Log log = 7;
     */
    log?: ConfigCore_Log;
    /**
     * @generated from protobuf field: runme.config.v1alpha1.ConfigCore.Server server = 8;
     */
    server?: ConfigCore_Server;
}
/**
 * @generated from protobuf message runme.config.v1alpha1.ConfigCore.Project
 */
export interface ConfigCore_Project {
    /**
     * dir is the directory to look for Markdown files.
     *
     * @generated from protobuf field: string dir = 1;
     */
    dir: string;
    /**
     * find_repo_upward indicates whether to find the nearest Git repository upward.
     * This is useful to, for example, recognize .gitignore files.
     *
     * @generated from protobuf field: bool find_repo_upward = 2;
     */
    findRepoUpward: boolean;
    /**
     * ignore_paths is a list of paths to ignore relative to dir.
     *
     * @generated from protobuf field: repeated string ignore_paths = 3 [json_name = "ignore"];
     */
    ignorePaths: string[];
    /**
     * disable_gitignore indicates whether to disable the .gitignore file.
     *
     * @generated from protobuf field: bool disable_gitignore = 4;
     */
    disableGitignore: boolean;
}
/**
 * @generated from protobuf message runme.config.v1alpha1.ConfigCore.Env
 */
export interface ConfigCore_Env {
    /**
     * use_system_env indicates whether to use the system environment variables.
     *
     * @generated from protobuf field: bool use_system_env = 1;
     */
    useSystemEnv: boolean;
    /**
     * sources is a list of files with env.
     *
     * @generated from protobuf field: repeated string sources = 2;
     */
    sources: string[];
}
/**
 * @generated from protobuf message runme.config.v1alpha1.ConfigCore.Log
 */
export interface ConfigCore_Log {
    /**
     * enabled indicates whether to enable logging.
     *
     * @generated from protobuf field: bool enabled = 1;
     */
    enabled: boolean;
    /**
     * path is the path to the log output file.
     *
     * @generated from protobuf field: string path = 2;
     */
    path: string;
    /**
     * verbose is the verbosity level of the log.
     *
     * @generated from protobuf field: bool verbose = 3;
     */
    verbose: boolean;
}
/**
 * @generated from protobuf message runme.config.v1alpha1.ConfigCore.Server
 */
export interface ConfigCore_Server {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: runme.config.v1alpha1.ConfigCore.Server.TLS tls = 2;
     */
    tls?: ConfigCore_Server_TLS;
}
/**
 * @generated from protobuf message runme.config.v1alpha1.ConfigCore.Server.TLS
 */
export interface ConfigCore_Server_TLS {
    /**
     * @generated from protobuf field: bool enabled = 1;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: string cert_file = 2;
     */
    certFile: string;
    /**
     * @generated from protobuf field: string key_file = 3;
     */
    keyFile: string;
}
/**
 * ConfigRepo describes repo-level configuration of the runme toolchain.
 *
 * @generated from protobuf message runme.config.v1alpha1.ConfigRepo
 */
export interface ConfigRepo {
    /**
     * filters is a list of filters to apply.
     * Filters can be applied to documents or
     * individual code blocks.
     *
     * @generated from protobuf field: repeated runme.config.v1alpha1.ConfigRepo.Filter filters = 5;
     */
    filters: ConfigRepo_Filter[];
}
/**
 * @generated from protobuf message runme.config.v1alpha1.ConfigRepo.Filter
 */
export interface ConfigRepo_Filter {
    /**
     * type is the type of the filter.
     *
     * @generated from protobuf field: runme.config.v1alpha1.ConfigRepo.FilterType type = 1;
     */
    type: ConfigRepo_FilterType;
    /**
     * condition is the filter program to execute for each document or block,
     * depending on the filter type.
     *
     * The condition should be a valid Expr expression and it should return a boolean value.
     * You can read more about the Expr syntax on https://expr-lang.org/.
     *
     * @generated from protobuf field: string condition = 2;
     */
    condition: string;
}
/**
 * @generated from protobuf enum runme.config.v1alpha1.ConfigRepo.FilterType
 */
export declare enum ConfigRepo_FilterType {
    /**
     * @generated from protobuf enum value: FILTER_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: FILTER_TYPE_BLOCK = 1;
     */
    BLOCK = 1,
    /**
     * @generated from protobuf enum value: FILTER_TYPE_DOCUMENT = 2;
     */
    DOCUMENT = 2
}
/**
 * Config describes the configuration of the runme toolchain, including CLI, server, and clients like VS Code extension.
 *
 * @generated from protobuf message runme.config.v1alpha1.Config
 */
export interface Config {
    /**
     * core is the system-level configuration.
     *
     * @generated from protobuf field: runme.config.v1alpha1.ConfigCore core = 1;
     */
    core?: ConfigCore;
    /**
     * repo is the repo-level configuration.
     *
     * @generated from protobuf field: runme.config.v1alpha1.ConfigRepo repo = 2;
     */
    repo?: ConfigRepo;
}
declare class ConfigCore$Type extends MessageType<ConfigCore> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigCore
 */
export declare const ConfigCore: ConfigCore$Type;
declare class ConfigCore_Project$Type extends MessageType<ConfigCore_Project> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigCore.Project
 */
export declare const ConfigCore_Project: ConfigCore_Project$Type;
declare class ConfigCore_Env$Type extends MessageType<ConfigCore_Env> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigCore.Env
 */
export declare const ConfigCore_Env: ConfigCore_Env$Type;
declare class ConfigCore_Log$Type extends MessageType<ConfigCore_Log> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigCore.Log
 */
export declare const ConfigCore_Log: ConfigCore_Log$Type;
declare class ConfigCore_Server$Type extends MessageType<ConfigCore_Server> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigCore.Server
 */
export declare const ConfigCore_Server: ConfigCore_Server$Type;
declare class ConfigCore_Server_TLS$Type extends MessageType<ConfigCore_Server_TLS> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigCore.Server.TLS
 */
export declare const ConfigCore_Server_TLS: ConfigCore_Server_TLS$Type;
declare class ConfigRepo$Type extends MessageType<ConfigRepo> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigRepo
 */
export declare const ConfigRepo: ConfigRepo$Type;
declare class ConfigRepo_Filter$Type extends MessageType<ConfigRepo_Filter> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.ConfigRepo.Filter
 */
export declare const ConfigRepo_Filter: ConfigRepo_Filter$Type;
declare class Config$Type extends MessageType<Config> {
    constructor();
}
/**
 * @generated MessageType for protobuf message runme.config.v1alpha1.Config
 */
export declare const Config: Config$Type;
export {};
