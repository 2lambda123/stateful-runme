/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/parser/v1/parser.proto" (package "runme.parser.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ParserService } from "./parser_pb";
import type { SerializeResponse } from "./parser_pb";
import type { SerializeRequest } from "./parser_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DeserializeResponse } from "./parser_pb";
import type { DeserializeRequest } from "./parser_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service runme.parser.v1.ParserService
 */
export interface IParserServiceClient {
    /**
     * @generated from protobuf rpc: Deserialize(runme.parser.v1.DeserializeRequest) returns (runme.parser.v1.DeserializeResponse);
     */
    deserialize(input: DeserializeRequest, options?: RpcOptions): UnaryCall<DeserializeRequest, DeserializeResponse>;
    /**
     * @generated from protobuf rpc: Serialize(runme.parser.v1.SerializeRequest) returns (runme.parser.v1.SerializeResponse);
     */
    serialize(input: SerializeRequest, options?: RpcOptions): UnaryCall<SerializeRequest, SerializeResponse>;
}
/**
 * @generated from protobuf service runme.parser.v1.ParserService
 */
export class ParserServiceClient implements IParserServiceClient, ServiceInfo {
    typeName = ParserService.typeName;
    methods = ParserService.methods;
    options = ParserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Deserialize(runme.parser.v1.DeserializeRequest) returns (runme.parser.v1.DeserializeResponse);
     */
    deserialize(input: DeserializeRequest, options?: RpcOptions): UnaryCall<DeserializeRequest, DeserializeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeserializeRequest, DeserializeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Serialize(runme.parser.v1.SerializeRequest) returns (runme.parser.v1.SerializeResponse);
     */
    serialize(input: SerializeRequest, options?: RpcOptions): UnaryCall<SerializeRequest, SerializeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SerializeRequest, SerializeResponse>("unary", this._transport, method, opt, input);
    }
}
