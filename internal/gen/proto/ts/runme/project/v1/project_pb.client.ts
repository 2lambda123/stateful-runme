/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/project/v1/project.proto" (package "runme.project.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ProjectService } from "./project_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoadResponse } from "./project_pb";
import type { LoadRequest } from "./project_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service runme.project.v1.ProjectService
 */
export interface IProjectServiceClient {
    /**
     * Load creates a new project, walks it, and streams events
     * about found directories, files, and code blocks.
     *
     * @generated from protobuf rpc: Load(runme.project.v1.LoadRequest) returns (stream runme.project.v1.LoadResponse);
     */
    load(input: LoadRequest, options?: RpcOptions): ServerStreamingCall<LoadRequest, LoadResponse>;
}
/**
 * @generated from protobuf service runme.project.v1.ProjectService
 */
export class ProjectServiceClient implements IProjectServiceClient, ServiceInfo {
    typeName = ProjectService.typeName;
    methods = ProjectService.methods;
    options = ProjectService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Load creates a new project, walks it, and streams events
     * about found directories, files, and code blocks.
     *
     * @generated from protobuf rpc: Load(runme.project.v1.LoadRequest) returns (stream runme.project.v1.LoadResponse);
     */
    load(input: LoadRequest, options?: RpcOptions): ServerStreamingCall<LoadRequest, LoadResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadRequest, LoadResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
