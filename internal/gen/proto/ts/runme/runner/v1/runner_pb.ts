/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/runner/v1/runner.proto" (package "runme.runner.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "../../../google/protobuf/wrappers_pb";
/**
 * @generated from protobuf message runme.runner.v1.Session
 */
export interface Session {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * envs keeps track of session environment variables.
     * They can be modified by executing programs which
     * alter them through "export" and "unset" commands.
     *
     * @generated from protobuf field: repeated string envs = 2;
     */
    envs: string[];
    /**
     * metadata is a map of client specific metadata.
     *
     * @generated from protobuf field: map<string, string> metadata = 3;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message runme.runner.v1.CreateSessionRequest
 */
export interface CreateSessionRequest {
    /**
     * metadata is a map of client specific metadata.
     *
     * @generated from protobuf field: map<string, string> metadata = 1;
     */
    metadata: {
        [key: string]: string;
    };
    /**
     * envs field provides an initial set of environment variables
     * for a newly created session.
     *
     * @generated from protobuf field: repeated string envs = 2;
     */
    envs: string[];
    /**
     * optional project from which to immediately load environment variables
     *
     * @generated from protobuf field: optional runme.runner.v1.Project project = 3;
     */
    project?: Project;
    /**
     * optional selection of which env store implementation to sue
     *
     * @generated from protobuf field: runme.runner.v1.SessionEnvStoreType env_store_type = 4;
     */
    envStoreType: SessionEnvStoreType;
}
/**
 * @generated from protobuf message runme.runner.v1.CreateSessionResponse
 */
export interface CreateSessionResponse {
    /**
     * @generated from protobuf field: runme.runner.v1.Session session = 1;
     */
    session?: Session;
}
/**
 * @generated from protobuf message runme.runner.v1.GetSessionRequest
 */
export interface GetSessionRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message runme.runner.v1.GetSessionResponse
 */
export interface GetSessionResponse {
    /**
     * @generated from protobuf field: runme.runner.v1.Session session = 1;
     */
    session?: Session;
}
/**
 * @generated from protobuf message runme.runner.v1.ListSessionsRequest
 */
export interface ListSessionsRequest {
}
/**
 * @generated from protobuf message runme.runner.v1.ListSessionsResponse
 */
export interface ListSessionsResponse {
    /**
     * @generated from protobuf field: repeated runme.runner.v1.Session sessions = 1;
     */
    sessions: Session[];
}
/**
 * @generated from protobuf message runme.runner.v1.DeleteSessionRequest
 */
export interface DeleteSessionRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message runme.runner.v1.DeleteSessionResponse
 */
export interface DeleteSessionResponse {
}
/**
 * @generated from protobuf message runme.runner.v1.Project
 */
export interface Project {
    /**
     * project root folder
     *
     * @generated from protobuf field: string root = 1;
     */
    root: string;
    /**
     * list of environment files to try and load
     * start with
     *
     * @generated from protobuf field: repeated string env_load_order = 2;
     */
    envLoadOrder: string[];
}
/**
 * @generated from protobuf message runme.runner.v1.Winsize
 */
export interface Winsize {
    /**
     * number of rows (in cells)
     *
     * @generated from protobuf field: uint32 rows = 1;
     */
    rows: number;
    /**
     * number of columns (in cells)
     *
     * @generated from protobuf field: uint32 cols = 2;
     */
    cols: number;
    /**
     * width in pixels
     *
     * @generated from protobuf field: uint32 x = 3;
     */
    x: number;
    /**
     * height in pixels
     *
     * @generated from protobuf field: uint32 y = 4;
     */
    y: number;
}
/**
 * @generated from protobuf message runme.runner.v1.ExecuteRequest
 */
export interface ExecuteRequest {
    /**
     * program_name is a name of the program to execute.
     * If it's not a path (relative or absolute), the runner
     * will try to resolve the name.
     * For example: "sh", "/bin/bash".
     *
     * @generated from protobuf field: string program_name = 1;
     */
    programName: string;
    /**
     * arguments is a list of arguments passed to the program.
     *
     * @generated from protobuf field: repeated string arguments = 2;
     */
    arguments: string[];
    /**
     * directory to execute the program in.
     *
     * @generated from protobuf field: string directory = 3;
     */
    directory: string;
    /**
     * envs is a list of additional environment variables
     * that will be injected to the executed program.
     *
     * @generated from protobuf field: repeated string envs = 4;
     */
    envs: string[];
    /**
     * commands are commands to be executed by the program.
     * The commands are joined and executed as a script.
     * For example: "echo 'Hello, World'", "ls -l /etc".
     * This is mutually exclusive with the script field.
     *
     * @generated from protobuf field: repeated string commands = 5;
     */
    commands: string[];
    /**
     * script is code to be executed by the program.
     * Individual lines are joined with the new line character.
     * This is mutually exclusive with the commands field.
     *
     * @generated from protobuf field: string script = 6;
     */
    script: string;
    /**
     * tty when true allocates a pseudo-TTY.
     *
     * @generated from protobuf field: bool tty = 7;
     */
    tty: boolean;
    /**
     * input_data is a byte array that will be send as input
     * to the program.
     *
     * @generated from protobuf field: bytes input_data = 8;
     */
    inputData: Uint8Array;
    /**
     * stop requests the running process to be stopped.
     * It is allowed only in the consecutive calls.
     *
     * @generated from protobuf field: runme.runner.v1.ExecuteStop stop = 9;
     */
    stop: ExecuteStop;
    /**
     * sets pty winsize
     * has no effect in non-interactive mode
     *
     * @generated from protobuf field: optional runme.runner.v1.Winsize winsize = 10;
     */
    winsize?: Winsize;
    /**
     * background indicates a background process
     * this will send the process' PID as a first response
     *
     * @generated from protobuf field: bool background = 11;
     */
    background: boolean;
    /**
     * session_id indicates in which Session the program should execute.
     * Executing in a Session might provide additional context like
     * environment variables.
     *
     * @generated from protobuf field: string session_id = 20;
     */
    sessionId: string;
    /**
     * strategy for selecting session
     *
     * @generated from protobuf field: runme.runner.v1.SessionStrategy session_strategy = 21;
     */
    sessionStrategy: SessionStrategy;
    /**
     * project for this runner
     * used to load environment variables from .env files
     *
     * @generated from protobuf field: optional runme.runner.v1.Project project = 22;
     */
    project?: Project;
    /**
     * whether to store the stdout of the last ran
     * block in the environment variable `__`
     *
     * @generated from protobuf field: bool store_last_output = 23;
     */
    storeLastOutput: boolean;
    /**
     * @generated from protobuf field: runme.runner.v1.CommandMode command_mode = 24;
     */
    commandMode: CommandMode;
    /**
     * language id associated with script
     *
     * @generated from protobuf field: string language_id = 25;
     */
    languageId: string;
    /**
     * file extension associated with script
     *
     * @generated from protobuf field: string file_extension = 26;
     */
    fileExtension: string;
}
/**
 * @generated from protobuf message runme.runner.v1.ProcessPID
 */
export interface ProcessPID {
    /**
     * @generated from protobuf field: int64 pid = 1;
     */
    pid: string;
}
/**
 * @generated from protobuf message runme.runner.v1.ExecuteResponse
 */
export interface ExecuteResponse {
    /**
     * exit_code is sent only in the final message.
     *
     * @generated from protobuf field: google.protobuf.UInt32Value exit_code = 1;
     */
    exitCode?: UInt32Value;
    /**
     * stdout_data contains bytes from stdout since the last response.
     *
     * @generated from protobuf field: bytes stdout_data = 2;
     */
    stdoutData: Uint8Array;
    /**
     * stderr_data contains bytes from stderr since the last response.
     *
     * @generated from protobuf field: bytes stderr_data = 3;
     */
    stderrData: Uint8Array;
    /**
     * pid contains the process' PID
     * this is only sent once in an initial response for background processes.
     *
     * @generated from protobuf field: runme.runner.v1.ProcessPID pid = 4;
     */
    pid?: ProcessPID;
    /**
     * mime_type is a detected MIME type of the stdout_data.
     *
     * This is only sent once in the first response containing stdout_data.
     *
     * @generated from protobuf field: string mime_type = 5;
     */
    mimeType: string;
}
/**
 * @generated from protobuf message runme.runner.v1.ResolveProgramCommandList
 */
export interface ResolveProgramCommandList {
    /**
     * commands are commands to be executed by the program.
     * The commands are joined and executed as a script.
     * For example: ["echo 'Hello, World'", "ls -l /etc"].
     *
     * @generated from protobuf field: repeated string lines = 1;
     */
    lines: string[];
}
/**
 * @generated from protobuf message runme.runner.v1.ResolveProgramRequest
 */
export interface ResolveProgramRequest {
    /**
     * @generated from protobuf oneof: source
     */
    source: {
        oneofKind: "commands";
        /**
         * commands are commands to be executed by the program.
         * The commands are joined and executed as a script.
         *
         * @generated from protobuf field: runme.runner.v1.ResolveProgramCommandList commands = 1;
         */
        commands: ResolveProgramCommandList;
    } | {
        oneofKind: "script";
        /**
         * script is code to be executed by the program.
         * Individual lines are joined with the new line character.
         *
         * @generated from protobuf field: string script = 2;
         */
        script: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * mode determines how variables resolution occurs.
     * It is usually based on document or cell annotation config.
     *
     * @generated from protobuf field: runme.runner.v1.ResolveProgramRequest.Mode mode = 3;
     */
    mode: ResolveProgramRequest_Mode;
    /**
     * env is a list of explicit environment variables that will be used
     * to resolve the environment variables found in the source.
     *
     * @generated from protobuf field: repeated string env = 4;
     */
    env: string[];
    /**
     * session_id indicates which session is the source of
     * environment variables. If not provided, the most recent
     * session can be used using session_strategy.
     *
     * @generated from protobuf field: string session_id = 5;
     */
    sessionId: string;
    /**
     * session_strategy is a strategy for selecting the session.
     *
     * @generated from protobuf field: runme.runner.v1.SessionStrategy session_strategy = 6;
     */
    sessionStrategy: SessionStrategy;
    /**
     * project used to load environment variables from .env files.
     *
     * @generated from protobuf field: optional runme.runner.v1.Project project = 7;
     */
    project?: Project;
}
/**
 * @generated from protobuf enum runme.runner.v1.ResolveProgramRequest.Mode
 */
export enum ResolveProgramRequest_Mode {
    /**
     * unspecified is auto (default) which prompts for all
     * unresolved environment variables.
     * Subsequent runs will likely resolve via the session.
     *
     * @generated from protobuf enum value: MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * prompt always means to prompt for all environment variables.
     *
     * @generated from protobuf enum value: MODE_PROMPT_ALL = 1;
     */
    PROMPT_ALL = 1,
    /**
     * skip means to not prompt for any environment variables.
     * All variables will be marked as resolved.
     *
     * @generated from protobuf enum value: MODE_SKIP_ALL = 2;
     */
    SKIP_ALL = 2
}
/**
 * @generated from protobuf message runme.runner.v1.ResolveProgramResponse
 */
export interface ResolveProgramResponse {
    /**
     * @generated from protobuf field: string script = 1;
     */
    script: string;
    /**
     * use script until commands normalization is implemented
     *
     * @generated from protobuf field: runme.runner.v1.ResolveProgramCommandList commands = 2;
     */
    commands?: ResolveProgramCommandList;
    /**
     * @generated from protobuf field: repeated runme.runner.v1.ResolveProgramResponse.VarResult vars = 3;
     */
    vars: ResolveProgramResponse_VarResult[];
}
/**
 * @generated from protobuf message runme.runner.v1.ResolveProgramResponse.VarResult
 */
export interface ResolveProgramResponse_VarResult {
    /**
     * prompt indicates the resolution status of the env variable.
     *
     * @generated from protobuf field: runme.runner.v1.ResolveProgramResponse.Status status = 1;
     */
    status: ResolveProgramResponse_Status;
    /**
     * name is the name of the environment variable.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * original_value is a default value of the environment variable.
     * It might be a value that is assigned to the variable in the script,
     * like FOO=bar or FOO=${FOO:-bar}.
     * If the variable is not assigned, it is an empty string.
     *
     * @generated from protobuf field: string original_value = 3;
     */
    originalValue: string;
    /**
     * resolved_value is a value of the environment variable resolved from a source.
     * If it is an empty string, it means that the environment variable is not resolved.
     *
     * @generated from protobuf field: string resolved_value = 4;
     */
    resolvedValue: string;
}
/**
 * @generated from protobuf enum runme.runner.v1.ResolveProgramResponse.Status
 */
export enum ResolveProgramResponse_Status {
    /**
     * unspecified is the default value and it means unresolved.
     *
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * unresolved with message means that the variable is unresolved
     * but it contains a message. E.g. FOO=this is message
     *
     * @generated from protobuf enum value: STATUS_UNRESOLVED_WITH_MESSAGE = 1;
     */
    UNRESOLVED_WITH_MESSAGE = 1,
    /**
     * unresolved with placeholder means that the variable is unresolved
     * but it contains a placeholder. E.g. FOO="this is placeholder"
     *
     * @generated from protobuf enum value: STATUS_UNRESOLVED_WITH_PLACEHOLDER = 2;
     */
    UNRESOLVED_WITH_PLACEHOLDER = 2,
    /**
     * resolved means that the variable is resolved.
     *
     * @generated from protobuf enum value: STATUS_RESOLVED = 3;
     */
    RESOLVED = 3,
    /**
     * unresolved with secret means that the variable is unresolved
     * and it requires treatment as a secret.
     *
     * @generated from protobuf enum value: STATUS_UNRESOLVED_WITH_SECRET = 4;
     */
    UNRESOLVED_WITH_SECRET = 4
}
/**
 * @generated from protobuf message runme.runner.v1.MonitorEnvStoreRequest
 */
export interface MonitorEnvStoreRequest {
    /**
     * @generated from protobuf field: runme.runner.v1.Session session = 1;
     */
    session?: Session;
}
/**
 * @generated from protobuf message runme.runner.v1.MonitorEnvStoreResponseSnapshot
 */
export interface MonitorEnvStoreResponseSnapshot {
    /**
     * @generated from protobuf field: repeated runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv envs = 1;
     */
    envs: MonitorEnvStoreResponseSnapshot_SnapshotEnv[];
}
/**
 * @generated from protobuf message runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv
 */
export interface MonitorEnvStoreResponseSnapshot_SnapshotEnv {
    /**
     * @generated from protobuf field: runme.runner.v1.MonitorEnvStoreResponseSnapshot.Status status = 1;
     */
    status: MonitorEnvStoreResponseSnapshot_Status;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string spec = 3;
     */
    spec: string;
    /**
     * @generated from protobuf field: string origin = 4;
     */
    origin: string;
    /**
     * @generated from protobuf field: string original_value = 5;
     */
    originalValue: string;
    /**
     * @generated from protobuf field: string resolved_value = 6;
     */
    resolvedValue: string;
    /**
     * @generated from protobuf field: string create_time = 7;
     */
    createTime: string;
    /**
     * @generated from protobuf field: string update_time = 8;
     */
    updateTime: string;
    /**
     * @generated from protobuf field: repeated runme.runner.v1.MonitorEnvStoreResponseSnapshot.Error errors = 9;
     */
    errors: MonitorEnvStoreResponseSnapshot_Error[];
}
/**
 * @generated from protobuf message runme.runner.v1.MonitorEnvStoreResponseSnapshot.Error
 */
export interface MonitorEnvStoreResponseSnapshot_Error {
    /**
     * @generated from protobuf field: uint32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf enum runme.runner.v1.MonitorEnvStoreResponseSnapshot.Status
 */
export enum MonitorEnvStoreResponseSnapshot_Status {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_LITERAL = 1;
     */
    LITERAL = 1,
    /**
     * @generated from protobuf enum value: STATUS_HIDDEN = 2;
     */
    HIDDEN = 2,
    /**
     * @generated from protobuf enum value: STATUS_MASKED = 3;
     */
    MASKED = 3
}
/**
 * @generated from protobuf message runme.runner.v1.MonitorEnvStoreResponse
 */
export interface MonitorEnvStoreResponse {
    /**
     * @generated from protobuf field: runme.runner.v1.MonitorEnvStoreType type = 1;
     */
    type: MonitorEnvStoreType;
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "snapshot";
        /**
         * @generated from protobuf field: runme.runner.v1.MonitorEnvStoreResponseSnapshot snapshot = 2;
         */
        snapshot: MonitorEnvStoreResponseSnapshot;
    } | {
        oneofKind: undefined;
    };
}
/**
 * env store implementation
 *
 * @generated from protobuf enum runme.runner.v1.SessionEnvStoreType
 */
export enum SessionEnvStoreType {
    /**
     * uses default env store
     *
     * @generated from protobuf enum value: SESSION_ENV_STORE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * uses owl store
     *
     * @generated from protobuf enum value: SESSION_ENV_STORE_TYPE_OWL = 1;
     */
    OWL = 1
}
/**
 * @generated from protobuf enum runme.runner.v1.ExecuteStop
 */
export enum ExecuteStop {
    /**
     * @generated from protobuf enum value: EXECUTE_STOP_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: EXECUTE_STOP_INTERRUPT = 1;
     */
    INTERRUPT = 1,
    /**
     * @generated from protobuf enum value: EXECUTE_STOP_KILL = 2;
     */
    KILL = 2
}
/**
 * @generated from protobuf enum runme.runner.v1.CommandMode
 */
export enum CommandMode {
    /**
     * @generated from protobuf enum value: COMMAND_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: COMMAND_MODE_INLINE_SHELL = 1;
     */
    INLINE_SHELL = 1,
    /**
     * @generated from protobuf enum value: COMMAND_MODE_TEMP_FILE = 2;
     */
    TEMP_FILE = 2
}
/**
 * strategy for selecting a session in an initial execute request
 *
 * @generated from protobuf enum runme.runner.v1.SessionStrategy
 */
export enum SessionStrategy {
    /**
     * uses session_id field to determine session
     * if none is present, a new session is created
     *
     * @generated from protobuf enum value: SESSION_STRATEGY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * uses most recently used session on the grpc server
     * if there is none, a new one is created
     *
     * @generated from protobuf enum value: SESSION_STRATEGY_MOST_RECENT = 1;
     */
    MOST_RECENT = 1
}
/**
 * @generated from protobuf enum runme.runner.v1.MonitorEnvStoreType
 */
export enum MonitorEnvStoreType {
    /**
     * @generated from protobuf enum value: MONITOR_ENV_STORE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * possible expansion to have a "timeline" view
     * MONITOR_ENV_STORE_TYPE_TIMELINE = 2;
     *
     * @generated from protobuf enum value: MONITOR_ENV_STORE_TYPE_SNAPSHOT = 1;
     */
    SNAPSHOT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Session$Type extends MessageType<Session> {
    constructor() {
        super("runme.runner.v1.Session", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "envs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.Session
 */
export const Session = new Session$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionRequest$Type extends MessageType<CreateSessionRequest> {
    constructor() {
        super("runme.runner.v1.CreateSessionRequest", [
            { no: 1, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "envs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "project", kind: "message", T: () => Project },
            { no: 4, name: "env_store_type", kind: "enum", T: () => ["runme.runner.v1.SessionEnvStoreType", SessionEnvStoreType, "SESSION_ENV_STORE_TYPE_"] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.CreateSessionRequest
 */
export const CreateSessionRequest = new CreateSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionResponse$Type extends MessageType<CreateSessionResponse> {
    constructor() {
        super("runme.runner.v1.CreateSessionResponse", [
            { no: 1, name: "session", kind: "message", T: () => Session }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.CreateSessionResponse
 */
export const CreateSessionResponse = new CreateSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionRequest$Type extends MessageType<GetSessionRequest> {
    constructor() {
        super("runme.runner.v1.GetSessionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.GetSessionRequest
 */
export const GetSessionRequest = new GetSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionResponse$Type extends MessageType<GetSessionResponse> {
    constructor() {
        super("runme.runner.v1.GetSessionResponse", [
            { no: 1, name: "session", kind: "message", T: () => Session }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.GetSessionResponse
 */
export const GetSessionResponse = new GetSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSessionsRequest$Type extends MessageType<ListSessionsRequest> {
    constructor() {
        super("runme.runner.v1.ListSessionsRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ListSessionsRequest
 */
export const ListSessionsRequest = new ListSessionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSessionsResponse$Type extends MessageType<ListSessionsResponse> {
    constructor() {
        super("runme.runner.v1.ListSessionsResponse", [
            { no: 1, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Session }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ListSessionsResponse
 */
export const ListSessionsResponse = new ListSessionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionRequest$Type extends MessageType<DeleteSessionRequest> {
    constructor() {
        super("runme.runner.v1.DeleteSessionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.DeleteSessionRequest
 */
export const DeleteSessionRequest = new DeleteSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionResponse$Type extends MessageType<DeleteSessionResponse> {
    constructor() {
        super("runme.runner.v1.DeleteSessionResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.DeleteSessionResponse
 */
export const DeleteSessionResponse = new DeleteSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Project$Type extends MessageType<Project> {
    constructor() {
        super("runme.runner.v1.Project", [
            { no: 1, name: "root", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "env_load_order", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.Project
 */
export const Project = new Project$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Winsize$Type extends MessageType<Winsize> {
    constructor() {
        super("runme.runner.v1.Winsize", [
            { no: 1, name: "rows", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cols", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "x", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "y", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.Winsize
 */
export const Winsize = new Winsize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteRequest$Type extends MessageType<ExecuteRequest> {
    constructor() {
        super("runme.runner.v1.ExecuteRequest", [
            { no: 1, name: "program_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "arguments", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "directory", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "envs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "commands", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "script", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tty", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "input_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "stop", kind: "enum", T: () => ["runme.runner.v1.ExecuteStop", ExecuteStop, "EXECUTE_STOP_"] },
            { no: 10, name: "winsize", kind: "message", T: () => Winsize },
            { no: 11, name: "background", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "session_strategy", kind: "enum", T: () => ["runme.runner.v1.SessionStrategy", SessionStrategy, "SESSION_STRATEGY_"] },
            { no: 22, name: "project", kind: "message", T: () => Project },
            { no: 23, name: "store_last_output", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "command_mode", kind: "enum", T: () => ["runme.runner.v1.CommandMode", CommandMode, "COMMAND_MODE_"] },
            { no: 25, name: "language_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "file_extension", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ExecuteRequest
 */
export const ExecuteRequest = new ExecuteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessPID$Type extends MessageType<ProcessPID> {
    constructor() {
        super("runme.runner.v1.ProcessPID", [
            { no: 1, name: "pid", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ProcessPID
 */
export const ProcessPID = new ProcessPID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteResponse$Type extends MessageType<ExecuteResponse> {
    constructor() {
        super("runme.runner.v1.ExecuteResponse", [
            { no: 1, name: "exit_code", kind: "message", T: () => UInt32Value },
            { no: 2, name: "stdout_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "stderr_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "pid", kind: "message", T: () => ProcessPID },
            { no: 5, name: "mime_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ExecuteResponse
 */
export const ExecuteResponse = new ExecuteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveProgramCommandList$Type extends MessageType<ResolveProgramCommandList> {
    constructor() {
        super("runme.runner.v1.ResolveProgramCommandList", [
            { no: 1, name: "lines", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ResolveProgramCommandList
 */
export const ResolveProgramCommandList = new ResolveProgramCommandList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveProgramRequest$Type extends MessageType<ResolveProgramRequest> {
    constructor() {
        super("runme.runner.v1.ResolveProgramRequest", [
            { no: 1, name: "commands", kind: "message", oneof: "source", T: () => ResolveProgramCommandList },
            { no: 2, name: "script", kind: "scalar", oneof: "source", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mode", kind: "enum", T: () => ["runme.runner.v1.ResolveProgramRequest.Mode", ResolveProgramRequest_Mode, "MODE_"] },
            { no: 4, name: "env", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "session_strategy", kind: "enum", T: () => ["runme.runner.v1.SessionStrategy", SessionStrategy, "SESSION_STRATEGY_"] },
            { no: 7, name: "project", kind: "message", T: () => Project }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ResolveProgramRequest
 */
export const ResolveProgramRequest = new ResolveProgramRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveProgramResponse$Type extends MessageType<ResolveProgramResponse> {
    constructor() {
        super("runme.runner.v1.ResolveProgramResponse", [
            { no: 1, name: "script", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "commands", kind: "message", T: () => ResolveProgramCommandList },
            { no: 3, name: "vars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResolveProgramResponse_VarResult }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ResolveProgramResponse
 */
export const ResolveProgramResponse = new ResolveProgramResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveProgramResponse_VarResult$Type extends MessageType<ResolveProgramResponse_VarResult> {
    constructor() {
        super("runme.runner.v1.ResolveProgramResponse.VarResult", [
            { no: 1, name: "status", kind: "enum", T: () => ["runme.runner.v1.ResolveProgramResponse.Status", ResolveProgramResponse_Status, "STATUS_"] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "original_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "resolved_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.ResolveProgramResponse.VarResult
 */
export const ResolveProgramResponse_VarResult = new ResolveProgramResponse_VarResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonitorEnvStoreRequest$Type extends MessageType<MonitorEnvStoreRequest> {
    constructor() {
        super("runme.runner.v1.MonitorEnvStoreRequest", [
            { no: 1, name: "session", kind: "message", T: () => Session }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.MonitorEnvStoreRequest
 */
export const MonitorEnvStoreRequest = new MonitorEnvStoreRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonitorEnvStoreResponseSnapshot$Type extends MessageType<MonitorEnvStoreResponseSnapshot> {
    constructor() {
        super("runme.runner.v1.MonitorEnvStoreResponseSnapshot", [
            { no: 1, name: "envs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MonitorEnvStoreResponseSnapshot_SnapshotEnv }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.MonitorEnvStoreResponseSnapshot
 */
export const MonitorEnvStoreResponseSnapshot = new MonitorEnvStoreResponseSnapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonitorEnvStoreResponseSnapshot_SnapshotEnv$Type extends MessageType<MonitorEnvStoreResponseSnapshot_SnapshotEnv> {
    constructor() {
        super("runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv", [
            { no: 1, name: "status", kind: "enum", T: () => ["runme.runner.v1.MonitorEnvStoreResponseSnapshot.Status", MonitorEnvStoreResponseSnapshot_Status, "STATUS_"] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "spec", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "origin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "original_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "resolved_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "create_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "update_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MonitorEnvStoreResponseSnapshot_Error }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv
 */
export const MonitorEnvStoreResponseSnapshot_SnapshotEnv = new MonitorEnvStoreResponseSnapshot_SnapshotEnv$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonitorEnvStoreResponseSnapshot_Error$Type extends MessageType<MonitorEnvStoreResponseSnapshot_Error> {
    constructor() {
        super("runme.runner.v1.MonitorEnvStoreResponseSnapshot.Error", [
            { no: 1, name: "code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.MonitorEnvStoreResponseSnapshot.Error
 */
export const MonitorEnvStoreResponseSnapshot_Error = new MonitorEnvStoreResponseSnapshot_Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonitorEnvStoreResponse$Type extends MessageType<MonitorEnvStoreResponse> {
    constructor() {
        super("runme.runner.v1.MonitorEnvStoreResponse", [
            { no: 1, name: "type", kind: "enum", T: () => ["runme.runner.v1.MonitorEnvStoreType", MonitorEnvStoreType, "MONITOR_ENV_STORE_TYPE_"] },
            { no: 2, name: "snapshot", kind: "message", oneof: "data", T: () => MonitorEnvStoreResponseSnapshot }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v1.MonitorEnvStoreResponse
 */
export const MonitorEnvStoreResponse = new MonitorEnvStoreResponse$Type();
/**
 * @generated ServiceType for protobuf service runme.runner.v1.RunnerService
 */
export const RunnerService = new ServiceType("runme.runner.v1.RunnerService", [
    { name: "CreateSession", options: {}, I: CreateSessionRequest, O: CreateSessionResponse },
    { name: "GetSession", options: {}, I: GetSessionRequest, O: GetSessionResponse },
    { name: "ListSessions", options: {}, I: ListSessionsRequest, O: ListSessionsResponse },
    { name: "DeleteSession", options: {}, I: DeleteSessionRequest, O: DeleteSessionResponse },
    { name: "MonitorEnvStore", serverStreaming: true, options: {}, I: MonitorEnvStoreRequest, O: MonitorEnvStoreResponse },
    { name: "Execute", serverStreaming: true, clientStreaming: true, options: {}, I: ExecuteRequest, O: ExecuteResponse },
    { name: "ResolveProgram", options: {}, I: ResolveProgramRequest, O: ResolveProgramResponse }
]);
