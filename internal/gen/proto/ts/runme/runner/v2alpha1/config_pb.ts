/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/runner/v2alpha1/config.proto" (package "runme.runner.v2alpha1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ProgramConfig is a configuration for a program to execute.
 * From this configuration, any program can be built.
 *
 * @generated from protobuf message runme.runner.v2alpha1.ProgramConfig
 */
export interface ProgramConfig {
    /**
     * program_name is a name of the program to execute.
     * If it's not a path (relative or absolute), the runner
     * will try to resolve the name.
     * For example: "sh", "/bin/bash".
     *
     * @generated from protobuf field: string program_name = 1;
     */
    programName: string;
    /**
     * arguments is a list of arguments passed to the program.
     *
     * @generated from protobuf field: repeated string arguments = 2;
     */
    arguments: string[];
    /**
     * directory to execute the program in.
     *
     * @generated from protobuf field: string directory = 3;
     */
    directory: string;
    /**
     * env is a list of additional environment variables
     * that will be injected to the executed program.
     *
     * @generated from protobuf field: repeated string env = 4;
     */
    env: string[];
    /**
     * @generated from protobuf oneof: source
     */
    source: {
        oneofKind: "commands";
        /**
         * commands are commands to be executed by the program.
         * The commands are joined and executed as a script.
         *
         * @generated from protobuf field: runme.runner.v2alpha1.ProgramConfig.CommandList commands = 5;
         */
        commands: ProgramConfig_CommandList;
    } | {
        oneofKind: "script";
        /**
         * script is code to be executed by the program.
         * Individual lines are joined with the new line character.
         *
         * @generated from protobuf field: string script = 6;
         */
        script: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * interactive, if true, uses a pseudo-tty to execute the program.
     * Otherwise, the program is executed using in-memory buffers for I/O.
     *
     * @generated from protobuf field: bool interactive = 7;
     */
    interactive: boolean;
    /**
     * TODO(adamb): understand motivation for this. In theory, source
     * should tell whether to execute it inline or as a file.
     *
     * @generated from protobuf field: runme.runner.v2alpha1.CommandMode mode = 8;
     */
    mode: CommandMode;
}
/**
 * @generated from protobuf message runme.runner.v2alpha1.ProgramConfig.CommandList
 */
export interface ProgramConfig_CommandList {
    /**
     * commands are commands to be executed by the program.
     * The commands are joined and executed as a script.
     * For example: ["echo 'Hello, World'", "ls -l /etc"].
     *
     * @generated from protobuf field: repeated string items = 1;
     */
    items: string[];
}
/**
 * @generated from protobuf enum runme.runner.v2alpha1.CommandMode
 */
export enum CommandMode {
    /**
     * @generated from protobuf enum value: COMMAND_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: COMMAND_MODE_INLINE = 1;
     */
    INLINE = 1,
    /**
     * @generated from protobuf enum value: COMMAND_MODE_FILE = 2;
     */
    FILE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ProgramConfig$Type extends MessageType<ProgramConfig> {
    constructor() {
        super("runme.runner.v2alpha1.ProgramConfig", [
            { no: 1, name: "program_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "arguments", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "directory", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "env", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "commands", kind: "message", oneof: "source", T: () => ProgramConfig_CommandList },
            { no: 6, name: "script", kind: "scalar", oneof: "source", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "interactive", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "mode", kind: "enum", T: () => ["runme.runner.v2alpha1.CommandMode", CommandMode, "COMMAND_MODE_"] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v2alpha1.ProgramConfig
 */
export const ProgramConfig = new ProgramConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgramConfig_CommandList$Type extends MessageType<ProgramConfig_CommandList> {
    constructor() {
        super("runme.runner.v2alpha1.ProgramConfig.CommandList", [
            { no: 1, name: "items", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message runme.runner.v2alpha1.ProgramConfig.CommandList
 */
export const ProgramConfig_CommandList = new ProgramConfig_CommandList$Type();
