{"cells":[{"source":"# Tortuga API","type":"markdown"},{"source":"The API built for [Tortuga Prototype](https://www.notion.so/statefulhq/Tortuga-Prototype-c406dd5fa1ad452dba15560a6cead5f9).","type":"markdown"},{"source":"\u003e **Warning!** All code snippets below assume you're in the **`./api`** directory.","type":"markdown"},{"source":"## Start","type":"markdown"},{"source":"First ðŸ˜‡, install dev dependencies:","type":"markdown"},{"attributes":{"name":"install"},"name":"install","executable":"sh","lines":["brew bundle"],"source":"```sh { name=install }\nbrew bundle\n```","type":"code"},{"source":"Deploy site to Vercel","type":"markdown"},{"attributes":{},"name":"httpsvercelcomstatefulstat","executable":"Vercel","lines":["https://vercel.com/stateful/stateful-com"],"source":"```Vercel\nhttps://vercel.com/stateful/stateful-com\n```","type":"code"},{"source":"Next run dependencies:","type":"markdown"},{"attributes":{"name":"docker-compose"},"name":"docker-compose","executable":"sh","lines":["docker compose up -d"],"source":"```sh { name=docker-compose }\n$ docker compose up -d\n```","type":"code"},{"source":"Then you should be able to successfully run:","type":"markdown"},{"attributes":{"name":"run"},"name":"run","executable":"sh","lines":["echo \"Running\"","go run ./cmd/api/main.go","2022/05/10 12:18:18 starting to listen on: :8080"],"source":"```sh { name=run }\n$ echo \"Running\"\n$ go run ./cmd/api/main.go\n2022/05/10 12:18:18 starting to listen on: :8080\n```","type":"code"},{"source":"## Development","type":"markdown"},{"source":"\u003e Currently, VS Code and Go extension require opening `./api` as a project root directory to work properly.\n\u003e You can use Workspaces to open the project root directory and `./api` as a second folder.","type":"markdown"},{"source":"Try using [watchexec](https://github.com/watchexec/watchexec) to autoreload.","type":"markdown"},{"attributes":{"name":"watch"},"name":"watch","executable":"sh","lines":["watchexec -r -e go -- go run ./cmd/api/main.go"],"source":"```sh { name=watch }\nwatchexec -r -e go -- go run ./cmd/api/main.go\n```","type":"code"},{"source":"## Deployment","type":"markdown"},{"source":"Deployments are managed with Terraform. Go to [infra](../infra) to learn how to run it.","type":"markdown"},{"source":"[infra](../infra) automatically discovers if source files of the api changed. If so, it triggers a Docker image build and updates a Cloud Run service.","type":"markdown"},{"source":"## Database","type":"markdown"},{"source":"It uses PostgreSQL.","type":"markdown"},{"source":"### Migrations","type":"markdown"},{"source":"[Atlas CLI](https://atlasgo.io/cli/getting-started/setting-up) is used to manage database migrations in a declarative way.","type":"markdown"},{"source":"Migrations are run automatically by the API server process.","type":"markdown"},{"source":"In a case you want to run them manually and re-use Postgres from Docker Compose:","type":"markdown"},{"attributes":{"name":"migrate"},"name":"migrate","executable":"sh","lines":["atlas schema apply -u \"postgres://postgres:postgres@localhost:15432/tortuga?sslmode=disable\" -f atlas.hcl"],"source":"```sh { name=migrate }\n$ atlas schema apply -u \"postgres://postgres:postgres@localhost:15432/tortuga?sslmode=disable\" -f atlas.hcl\n```","type":"code"},{"source":"## API","type":"markdown"},{"source":"\u003e Each insert accepts also `user_id` which is nullable for now.\n\u003e All endpoints implement also `GET` method to return all collected results so far starting from the most recent.","type":"markdown"},{"source":"### Tasks","type":"markdown"},{"source":"Inserting task execution metadata:","type":"markdown"},{"attributes":{"name":"post-task"},"name":"post-task","executable":"sh","lines":["curl -XPOST -H \"Content-Type: application/json\" localhost:8080/tasks/ -d '{\"duration\": \"10s\", \"exit_code\": 0, \"name\": \"Run task\", \"runbook_name\": \"RB 1\", \"runbook_run_id\": \"6e975f1b-0c0f-4765-b24a-2aa87b901c06\", \"start_time\": \"2022-05-05T04:12:43Z\", \"command\": \"/bin/sh\", \"args\": \"echo hello\", \"feedback\": \"this is cool!\", \"extra\": \"{\\\"hello\\\": \\\"world\\\"}\"}'","{\"id\":\"6e975f1b-0c0f-4765-b24a-2aa87b901c06\"}"],"source":"```sh { name=post-task }\n$ curl -XPOST -H \"Content-Type: application/json\" localhost:8080/tasks/ -d '{\"duration\": \"10s\", \"exit_code\": 0, \"name\": \"Run task\", \"runbook_name\": \"RB 1\", \"runbook_run_id\": \"6e975f1b-0c0f-4765-b24a-2aa87b901c06\", \"start_time\": \"2022-05-05T04:12:43Z\", \"command\": \"/bin/sh\", \"args\": \"echo hello\", \"feedback\": \"this is cool!\", \"extra\": \"{\\\"hello\\\": \\\"world\\\"}\"}'\n{\"id\":\"6e975f1b-0c0f-4765-b24a-2aa87b901c06\"}\n```","type":"code"},{"source":"A task can be patched:","type":"markdown"},{"attributes":{"name":"patch-task"},"name":"patch-task","executable":"sh","lines":["curl -X PATCH -H \"Content-Type: application/json\" localhost:8080/tasks/6e975f1b-0c0f-4765-b24a-2aa87b901c06/ -d '{\"duration\": \"15s\", \"exit_code\": 1}'","{\"id\":\"6e975f1b-0c0f-4765-b24a-2aa87b901c06\"}"],"source":"```sh { name=patch-task }\n$ curl -X PATCH -H \"Content-Type: application/json\" localhost:8080/tasks/6e975f1b-0c0f-4765-b24a-2aa87b901c06/ -d '{\"duration\": \"15s\", \"exit_code\": 1}'\n{\"id\":\"6e975f1b-0c0f-4765-b24a-2aa87b901c06\"}\n```","type":"code"},{"source":"### Feedback","type":"markdown"},{"source":"Inserting feedback can optionally take a `task_id`:","type":"markdown"},{"attributes":{"name":"post-feedback"},"name":"post-feedback","executable":"sh","lines":["curl -XPOST -H \"Content-Type: application/json\" localhost:8080/feedback/ -d '{\"message\": \"My feedback!\", \"task_id\": \"6e975f1b-0c0f-4765-b24a-2aa87b901c06\"}'","{\"id\":\"a02b6b5f-46c4-40ff-8160-ff7d55b8ca6f\"}"],"source":"```sh { name=post-feedback }\n$ curl -XPOST -H \"Content-Type: application/json\" localhost:8080/feedback/ -d '{\"message\": \"My feedback!\", \"task_id\": \"6e975f1b-0c0f-4765-b24a-2aa87b901c06\"}'\n{\"id\":\"a02b6b5f-46c4-40ff-8160-ff7d55b8ca6f\"}\n```","type":"code"},{"source":"Feedback can be patched:","type":"markdown"},{"attributes":{"name":"patch-feedback"},"name":"patch-feedback","executable":"sh","lines":["curl -X PATCH -H \"Content-Type: application/json\" localhost:8080/feedback/a02b6b5f-46c4-40ff-8160-ff7d55b8ca6f/ -d '{\"message\": \"Modified!\"}'","{\"id\":\"a02b6b5f-46c4-40ff-8160-ff7d55b8ca6f\"}"],"source":"```sh { name=patch-feedback }\n$ curl -X PATCH -H \"Content-Type: application/json\" localhost:8080/feedback/a02b6b5f-46c4-40ff-8160-ff7d55b8ca6f/ -d '{\"message\": \"Modified!\"}'\n{\"id\":\"a02b6b5f-46c4-40ff-8160-ff7d55b8ca6f\"}\n```","type":"code"},{"source":"### Editor configs","type":"markdown"},{"source":"Inserting editor configs:","type":"markdown"},{"attributes":{"name":"post-editor-config"},"name":"post-editor-config","executable":"sh","lines":["curl -XPOST -H \"Content-Type: application/json\" localhost:8080/editor-configs/ -d '{\"data\": \"{\\\"files.autoSave\\\": \\\"afterDelay\\\"}\"}'","{\"id\":\"4c7d6fb5-eb53-44f7-8883-80f276af65a1\"}"],"source":"```sh { name=post-editor-config }\n$ curl -XPOST -H \"Content-Type: application/json\" localhost:8080/editor-configs/ -d '{\"data\": \"{\\\"files.autoSave\\\": \\\"afterDelay\\\"}\"}'\n{\"id\":\"4c7d6fb5-eb53-44f7-8883-80f276af65a1\"}\n```\n","type":"code"}]}
