// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: runme/project/v1/project.proto

package projectv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_Load_FullMethodName = "/runme.project.v1.ProjectService/Load"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// Load creates a new project, walks it, and streams events
	// about found directories, files, and code blocks.
	Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (ProjectService_LoadClient, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (ProjectService_LoadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[0], ProjectService_Load_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceLoadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_LoadClient interface {
	Recv() (*LoadResponse, error)
	grpc.ClientStream
}

type projectServiceLoadClient struct {
	grpc.ClientStream
}

func (x *projectServiceLoadClient) Recv() (*LoadResponse, error) {
	m := new(LoadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	// Load creates a new project, walks it, and streams events
	// about found directories, files, and code blocks.
	Load(*LoadRequest, ProjectService_LoadServer) error
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) Load(*LoadRequest, ProjectService_LoadServer) error {
	return status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_Load_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).Load(m, &projectServiceLoadServer{stream})
}

type ProjectService_LoadServer interface {
	Send(*LoadResponse) error
	grpc.ServerStream
}

type projectServiceLoadServer struct {
	grpc.ServerStream
}

func (x *projectServiceLoadServer) Send(m *LoadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runme.project.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Load",
			Handler:       _ProjectService_Load_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runme/project/v1/project.proto",
}
